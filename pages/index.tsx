import Head from "next/head";
import Image from "next/image";
import certificate from "../public/Certificate.jpg";
import certificateBronze from "../public/Certificate-Bronze.jpg";
import certificateSilver from "../public/Certificate-Silver.jpg";
import certificateGold from "../public/Certificate-Gold.jpg";
import { useState } from "react";
import styles from "../styles/Home.module.css";
import { PDFDocument, rgb, cmyk } from "pdf-lib";
import fontkit from "@pdf-lib/fontkit";

export default function Home() {
  const [name, setName] = useState("");
  const [fontSize, setFontsize] = useState("");
  const [level, setLevel] = useState("1");

  return (
    <div className={styles.container}>
      <Head>
        <title>Certificate Generate</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <p>Certificate Generate</p>
        <p>{name}</p>
        <>
          <label>Name :</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <label>Size of text`( must be 0-100)` :</label>
          <input
            type="number"
            value={fontSize}
            onChange={(e) => setFontsize(e.target.value)}
          />
          <select value={level} onChange={(e) => setLevel(e.target.value)}>
            <option value="1">Normal</option>
            <option value="2">Bronze</option>
            <option value="3">Silver</option>
            <option value="4">Gold</option>
          </select>
        </>
        <button
          onClick={async () => {
            console.log(name);
            const pdfDoc = await PDFDocument.create();

            const fontBytes = await fetch(
              // "https://cdn.jsdelivr.net/npm/font-th-sarabun-new@1.0.0/fonts/THSarabunNew-webfont.ttf"
              // "https://cdn.jsdelivr.net/npm/@openfonts/prompt_thai@1.44.1/files/prompt-thai-400.woff"
              // "https://cdn.jsdelivr.net/npm/@fontsource/ibm-plex-sans-thai@4.5.11/files/ibm-plex-sans-thai-all-400-normal.woff"
              "https://cdn.jsdelivr.net/npm/@fontsource/noto-sans-thai@4.5.12/files/noto-sans-thai-all-400-normal.woff"
            ).then((res) => res.arrayBuffer());
            const fontBytes2 = await fetch(
              // "https://cdn.jsdelivr.net/npm/font-th-sarabun-new@1.0.0/fonts/THSarabunNew-webfont.ttf"
              // "https://cdn.jsdelivr.net/npm/@openfonts/prompt_thai@1.44.1/files/prompt-thai-400.woff"
              // "https://cdn.jsdelivr.net/npm/@fontsource/ibm-plex-sans-thai@4.5.11/files/ibm-plex-sans-thai-all-400-normal.woff"
              "https://cdn.jsdelivr.net/npm/@fontsource/noto-sans-thai@4.5.12/files/noto-sans-thai-all-700-normal.woff"
            ).then((res) => res.arrayBuffer());

            // const jpgImageBytes = await fetch(
            //   certificate.src // path to your image
            // ).then((res) => {
            //   console.log("jpgImageBytes", certificate.src);
            //   return res.arrayBuffer();
            // });
            let jpgImageBytes;
            try {
              jpgImageBytes = await fetch(
                // certificate.src // path to your image
                "https://storage.googleapis.com/nat-certificate/math/MATH_MTY1_BRONZE.jpg"
              ).then((res) => {
                console.log("jpgImageBytes", res);
                return res.arrayBuffer();
              });
            } catch (error) {
              console.log("error", error);
            }
            // switch (level) {
            //   case "2":
            //     jpgImageBytes = await fetch(
            //       certificateBronze.src // path to your image
            //     ).then((res) => {
            //       console.log("jpgImageBytes", certificate.src);
            //       return res.arrayBuffer();
            //     });
            //     break;
            //   case "3":
            //     jpgImageBytes = await fetch(
            //       certificateSilver.src // path to your image
            //     ).then((res) => {
            //       console.log("jpgImageBytes", certificate.src);
            //       return res.arrayBuffer();
            //     });

            //     break;
            //   case "4":
            //     jpgImageBytes = await fetch(
            //       certificateGold.src // path to your image
            //     ).then((res) => {
            //       console.log("jpgImageBytes", certificate.src);
            //       return res.arrayBuffer();
            //     });

            //     break;

            //   default:
            //     try {
            //       jpgImageBytes = await fetch(
            //         // certificate.src // path to your image
            //         "https://lh3.google.com/u/0/d/1zQb9gKl__rEkgBkqLAQwguukZtXt8Zfa=w1338-h976-iv1"
            //       ).then((res) => {
            //         // console.log("jpgImageBytes", certificate.src);
            //         return res.arrayBuffer();
            //       });
            //     } catch (error) {
            //       console.log("error", error);

            //     }
            //     // jpgImageBytes = await fetch(
            //     //   // certificate.src // path to your image
            //     //   "https://lh3.google.com/u/0/d/1zQb9gKl__rEkgBkqLAQwguukZtXt8Zfa=w1338-h976-iv1"
            //     // ).then((res) => {
            //     //   // console.log("jpgImageBytes", certificate.src);
            //     //   return res.arrayBuffer();
            //     // });
            //     break;
            // }

            pdfDoc.registerFontkit(fontkit);
            const customFont = await pdfDoc.embedFont(fontBytes, {
              subset: true,
            });

            const jpgImage = await pdfDoc.embedJpg(jpgImageBytes);
            const jpgDims = jpgImage.scale(0.5);

            const page = pdfDoc.addPage([jpgDims.width, jpgDims.height]);

            page.drawImage(jpgImage, {
              x: 0,
              y: 0,
              width: jpgDims.width,
              height: jpgDims.height,
            });

            page.drawText(name, {
              x:
                page.getWidth() / 2 -
                (name.length / 2) * (parseInt(fontSize) / 2.35),
              y: page.getHeight() / 2 - parseInt(fontSize) / 1.4,
              size: parseInt(fontSize),
              font: customFont,
              // font: timesRomanFont,
              // color: rgb(6, 57, 112),
              color: cmyk(0.64, 0.73, 0, 0.69),
            });

            page.drawText(`word word word word ${name}`, {
              x:
                page.getWidth() / 2 -
                (`word word word word ${name}`.length / 2) *
                  (parseInt(fontSize) / 2 / 2.2),
              y: page.getHeight() / 2 - parseInt(fontSize) * 2,
              size: parseInt(fontSize) / 2.25,
              font: customFont,
              // font: timesRomanFont,
              // color: rgb(6, 57, 112),
              color: cmyk(0.64, 0.73, 0, 0.69),
            });

            page.drawText(`Wording Wording Wording Wording ${name}`, {
              x:
                page.getWidth() / 2 -
                (`Wording Wording Wording Wording ${name}`.length / 2) *
                  (parseInt(fontSize) / 2 / 2.2),
              y: page.getHeight() / 2 - parseInt(fontSize) * 3,
              size: parseInt(fontSize) / 2.25,
              font: customFont,
              // font: timesRomanFont,
              // color: rgb(6, 57, 112),
              color: cmyk(0.64, 0.73, 0, 0.69),
            });
            const pdfBytes = await pdfDoc.save();
            const pdf = document.createElement("a");
            pdf.href = URL.createObjectURL(
              new Blob([pdfBytes], { type: "application/pdf" })
            );
            pdf.download = `${name}-certificate.pdf`;
            pdf.click();
          }}
        >
          Submit
        </button>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
